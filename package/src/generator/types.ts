import { join } from "node:path";
import { mkdir, readFile, writeFile } from "node:fs/promises";
import { GLOB, ROUTES_PATH, CACHE_FOLDER } from "../utils/constants";
import { containsServerExport, getAST } from "../utils/ast";

const BANNER =
  `
//! THIS FILE IS AUTOMATICALLY GENERATED BY "satone" CLI
//! DURING "build" AND "dev" COMMANDS.
`.trim() + "\n\n";

const checkCacheFolder = async () => {
  await mkdir(CACHE_FOLDER, { recursive: true });
};

const write = async (file: string, content: string) => {
  await writeFile(join(CACHE_FOLDER, file), content, "utf8");
};

/**
 * Will distribute the types under `node_modules/.satone/eden.d.ts`
 */
const generateEdenTypes = async () => {
  await checkCacheFolder();

  let output = BANNER + `import Elysia from "elysia";\n\n`;
  const routes: string[] = [];

  for await (const file of GLOB.scan(ROUTES_PATH)) {
    const code = await readFile(join(ROUTES_PATH, file), "utf8");

    // Check if there's a server export in this route.
    const ast = getAST(code);
    if (!containsServerExport(ast)) continue;

    const route = "/" + file.replace("index", "").replace(/\.ts[x]/, "");

    output += `import { server as plug${routes.length} } from ${JSON.stringify(
      join("..", "..", "src", "routes", file)
    )};\n`;

    routes.push(route);
  }

  output += `\nconst app = new Elysia()`;
  for (let curr = 0; curr < routes.length; curr++) {
    const route = routes[curr];
    output += `\n  .group(${JSON.stringify(
      route
    )}, (app) => app.use(plug${curr}))`;
  }

  output += `;\n\nexport type App = typeof app;\n`;
  await write("eden.ts", output);
};

const generateIndexDTS = async () => {
  await checkCacheFolder();

  let output = BANNER + `import type { App } from "./eden";\n\n`;

  output +=
    `
declare global {
  export type SatoneServerRoutes = App;
}
  `.trim() + "\n";

  await write("index.d.ts", output);
};

export const generateTypes = async () => {
  await generateIndexDTS();
  await generateEdenTypes();
};
